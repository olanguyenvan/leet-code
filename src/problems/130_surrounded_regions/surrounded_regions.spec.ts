const { capture, solve } = require("./surrounded_regions");

describe("capture", () => {
    it.each([
        [
            [
                [
                    ["X", "X", "X"],
                    ["X", "O", "X"],
                    ["X", "X", "X"],
                ],
                [[1, 1]],
            ],
            [
                ["X", "X", "X"],
                ["X", "X", "X"],
                ["X", "X", "X"],
            ],
        ],
        [
            [
                [
                    ["X", "X", "X", "X"],
                    ["X", "O", "O", "X"],
                    ["X", "X", "X", "X"],
                ],
                [
                    [1, 1],
                    [1, 2],
                ],
            ],
            [
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
            ],
        ],
    ])("capture(%s) should be %s", ([board, indices], output) => {
        capture(board, indices);
        expect(board).toEqual(output);
    });
});

describe("solve", () => {
    it.each([
        [[["X"]], [["X"]]],
        [
            [
                ["X", "X", "X"],
                ["X", "X", "X"],
                ["X", "X", "X"],
            ],
            [
                ["X", "X", "X"],
                ["X", "X", "X"],
                ["X", "X", "X"],
            ],
        ],
        [
            [
                ["X", "X", "X"],
                ["X", "O", "X"],
                ["X", "X", "X"],
            ],
            [
                ["X", "X", "X"],
                ["X", "X", "X"],
                ["X", "X", "X"],
            ],
        ],
        [
            [
                ["X", "X", "X"],
                ["X", "O", "O"],
                ["X", "X", "X"],
            ],
            [
                ["X", "X", "X"],
                ["X", "O", "O"],
                ["X", "X", "X"],
            ],
        ],
        [
            [
                ["X", "X", "X"],
                ["O", "O", "O"],
                ["X", "X", "X"],
            ],
            [
                ["X", "X", "X"],
                ["O", "O", "O"],
                ["X", "X", "X"],
            ],
        ],
        [
            [
                ["O", "X", "X"],
                ["X", "O", "X"],
                ["X", "X", "X"],
            ],
            [
                ["O", "X", "X"],
                ["X", "X", "X"],
                ["X", "X", "X"],
            ],
        ],

        [
            [
                ["O", "X", "O"],
                ["X", "O", "X"],
                ["O", "X", "O"],
            ],
            [
                ["O", "X", "O"],
                ["X", "X", "X"],
                ["O", "X", "O"],
            ],
        ],
        [
            [
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "O", "O", "X"],
                ["X", "X", "X", "X"],
            ],
            [
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
            ],
        ],
        [
            [
                ["X", "X", "X", "X"],
                ["X", "O", "O", "X"],
                ["X", "O", "O", "X"],
                ["X", "X", "X", "X"],
            ],
            [
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
            ],
        ],
        [
            [
                ["X", "X", "X", "X"],
                ["X", "O", "O", "X"],
                ["X", "X", "O", "X"],
                ["X", "O", "X", "X"],
            ],
            [
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "X", "X", "X"],
                ["X", "O", "X", "X"],
            ],
        ],

        [
            [
                ["O", "X", "X", "O", "X"],
                ["X", "O", "O", "X", "O"],
                ["X", "O", "X", "O", "X"],
                ["O", "X", "O", "O", "O"],
                ["X", "X", "O", "X", "O"],
            ],
            [
                ["O", "X", "X", "O", "X"],
                ["X", "X", "X", "X", "O"],
                ["X", "X", "X", "O", "X"],
                ["O", "X", "O", "O", "O"],
                ["X", "X", "O", "X", "O"],
            ],
        ],
        [
            [
                ["O", "X", "O", "O", "O", "O", "O", "O", "O"],
                ["O", "O", "O", "X", "O", "O", "O", "O", "X"],
                ["O", "X", "O", "X", "O", "O", "O", "O", "X"],
                ["O", "O", "O", "O", "X", "O", "O", "O", "O"],
                ["X", "O", "O", "O", "O", "O", "O", "O", "X"],
                ["X", "X", "O", "O", "X", "O", "X", "O", "X"],
                ["O", "O", "O", "X", "O", "O", "O", "O", "O"],
                ["O", "O", "O", "X", "O", "O", "O", "O", "O"],
                ["O", "O", "O", "O", "O", "X", "X", "O", "O"],
            ],
            [
                ["O", "X", "O", "O", "O", "O", "O", "O", "O"],
                ["O", "O", "O", "X", "O", "O", "O", "O", "X"],
                ["O", "X", "O", "X", "O", "O", "O", "O", "X"],
                ["O", "O", "O", "O", "X", "O", "O", "O", "O"],
                ["X", "O", "O", "O", "O", "O", "O", "O", "X"],
                ["X", "X", "O", "O", "X", "O", "X", "O", "X"],
                ["O", "O", "O", "X", "O", "O", "O", "O", "O"],
                ["O", "O", "O", "X", "O", "O", "O", "O", "O"],
                ["O", "O", "O", "O", "O", "X", "X", "O", "O"],
            ],
        ],
        [
            [
                ["O", "X", "O", "O", "O"],
                ["O", "O", "O", "X", "O"],
                ["O", "X", "O", "X", "O"],
                ["O", "O", "O", "O", "X"],
                ["X", "O", "O", "O", "O"],
                ["X", "X", "O", "O", "X"],
                ["O", "O", "O", "X", "O"],
                ["O", "O", "O", "X", "O"],
                ["O", "O", "O", "O", "O"],
            ],
            [
                ["O", "X", "O", "O", "O"],
                ["O", "O", "O", "X", "O"],
                ["O", "X", "O", "X", "O"],
                ["O", "O", "O", "O", "X"],
                ["X", "O", "O", "O", "O"],
                ["X", "X", "O", "O", "X"],
                ["O", "O", "O", "X", "O"],
                ["O", "O", "O", "X", "O"],
                ["O", "O", "O", "O", "O"],
            ],
        ],

        [
            Array.from({ length: 10 }, () => new Array(10).fill("X")),
            Array.from({ length: 10 }, () => new Array(10).fill("X")),
        ],
        [
            Array.from({ length: 10 }, () => new Array(10).fill("O")),
            Array.from({ length: 10 }, () => new Array(10).fill("O")),
        ],
    ])("solve(%s) should be %s", (input, output) => {
        solve(input);
        expect(input).toEqual(output);
    });
});
